// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics
{
    /// <summary>
    /// Builds and executes requests for operations under \{account}\dns_analytics
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Dns_analyticsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Dns_analyticsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{account}/dns_analytics{?end_date*,groupings*,page*,per_page*,sort*,start_date*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Dns_analyticsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{account}/dns_analytics{?end_date*,groupings*,page*,per_page*,sort*,start_date*}", rawUrl)
        {
        }
        /// <summary>
        /// Queries and returns DNS Analytics data available for the provided query parameters. This API is currently in Public Beta. During the Public Beta period, changes may occur at any time.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsGetResponse?> GetAsDns_analyticsGetResponseAsync(Action<RequestConfiguration<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsRequestBuilder.Dns_analyticsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsGetResponse> GetAsDns_analyticsGetResponseAsync(Action<RequestConfiguration<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsRequestBuilder.Dns_analyticsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsGetResponse>(requestInfo, global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Queries and returns DNS Analytics data available for the provided query parameters. This API is currently in Public Beta. During the Public Beta period, changes may occur at any time.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsDns_analyticsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsRequestBuilder.Dns_analyticsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsRequestBuilder.Dns_analyticsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsResponse>(requestInfo, global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Queries and returns DNS Analytics data available for the provided query parameters. This API is currently in Public Beta. During the Public Beta period, changes may occur at any time.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsRequestBuilder.Dns_analyticsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsRequestBuilder.Dns_analyticsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Queries and returns DNS Analytics data available for the provided query parameters. This API is currently in Public Beta. During the Public Beta period, changes may occur at any time.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dns_analyticsRequestBuilderGetQueryParameters 
        {
            /// <summary>Only include results before the given date. Format is ISO8601 (YYYY-MM-DD). It can be a max of 31 days away from the start_date. If omitted, it defaults to 1 day ago.</summary>
            [QueryParameter("end_date")]
            public Date? EndDate { get; set; }
            /// <summary>How to group the results of the account&apos;s DNS analytics. No groupings will be applied by default unless specified. Multiple groupings can be provided, separated by a comma. Applying groupings to the query will add columns to the response payload.</summary>
            [Obsolete("This property is deprecated, use GroupingsAsGetGroupingsQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("groupings")]
            public string? Groupings { get; set; }
#nullable restore
#else
            [QueryParameter("groupings")]
            public string Groupings { get; set; }
#endif
            /// <summary>How to group the results of the account&apos;s DNS analytics. No groupings will be applied by default unless specified. Multiple groupings can be provided, separated by a comma. Applying groupings to the query will add columns to the response payload.</summary>
            [QueryParameter("groupings")]
            public global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.GetGroupingsQueryParameterType? GroupingsAsGetGroupingsQueryParameterType { get; set; }
            /// <summary>The page of the results requested. Defaults to 1.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>The amount of rows to return in each page. The default is usually 100. There are endpoints that override this default to accommodate specific use cases.</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Sort results. Default sorting policy is by ascending date, then ascending zone_name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string Sort { get; set; }
#endif
            /// <summary>Only include results after the given date. Format is ISO8601 (YYYY-MM-DD). It can be a max of 31 days away from the end_date. If omitted, it defaults to 31 days ago.</summary>
            [QueryParameter("start_date")]
            public Date? StartDate { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dns_analyticsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsRequestBuilder.Dns_analyticsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
