// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dns_analyticsGetResponse_query : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The account_id property</summary>
        public int? AccountId { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A date value formatted as ISO 8601.</summary>
        public Date? EndDate { get; set; }
        /// <summary>Grouping applied to the returned data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Groupings { get; set; }
#nullable restore
#else
        public string Groupings { get; set; }
#endif
        /// <summary>The returned page number.</summary>
        public int? Page { get; set; }
        /// <summary>The page size used to generate the data.</summary>
        public int? PerPage { get; set; }
        /// <summary>Sorting applied to the returned data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sort { get; set; }
#nullable restore
#else
        public string Sort { get; set; }
#endif
        /// <summary>A date value formatted as ISO 8601.</summary>
        public Date? StartDate { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsGetResponse_query"/> and sets the default values.
        /// </summary>
        public Dns_analyticsGetResponse_query()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsGetResponse_query"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsGetResponse_query CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.DNSimple.OpenApiClient.Item.Dns_analytics.Dns_analyticsGetResponse_query();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_id", n => { AccountId = n.GetIntValue(); } },
                { "end_date", n => { EndDate = n.GetDateValue(); } },
                { "groupings", n => { Groupings = n.GetStringValue(); } },
                { "page", n => { Page = n.GetIntValue(); } },
                { "per_page", n => { PerPage = n.GetIntValue(); } },
                { "sort", n => { Sort = n.GetStringValue(); } },
                { "start_date", n => { StartDate = n.GetDateValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("account_id", AccountId);
            writer.WriteDateValue("end_date", EndDate);
            writer.WriteStringValue("groupings", Groupings);
            writer.WriteIntValue("page", Page);
            writer.WriteIntValue("per_page", PerPage);
            writer.WriteStringValue("sort", Sort);
            writer.WriteDateValue("start_date", StartDate);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
